# Install/remove packages
- name: Ensure unattended upgrades are removed
  become: true
  apt:
    state: absent
    pkg:
      - unattended-upgrades
      - apt-listchanges
      - needrestart
    purge: true
  when: not apt_auto_update

- name: Ensure unattended upgrades are installed
  become: true
  apt:
    state: present
    pkg:
      - unattended-upgrades
      - apt-listchanges
      - needrestart
    purge: true
  when: apt_auto_update

# Enable unattended upgrades
- name: Ensure unattended upgrades are enabled
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    regexp: '^/?/? ?APT::Periodic::Update-Package-Lists "'
    line: 'APT::Periodic::Update-Package-Lists "1";'
    state: present
    create: true
  when: apt_auto_update

- name: Ensure auto update package list is enabled
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    regexp: '^/?/? ?APT::Periodic::Unattended-Upgrade "'
    line: 'APT::Periodic::Unattended-Upgrade "1";'
    state: present
    create: true
  when: apt_auto_update

# Configure unattended upgrades repos
- name: Ensure Debian updates repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"origin=Debian,codename=\${distro_codename}-updates";'
    line: '        "origin=Debian,codename=${distro_codename}-updates";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and ansible_distribution == 'Debian'

- name: Ensure Debian backports repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"o=Debian Backports,a=\${distro_codename}-backports,l=Debian Backports";'
    line: '        "o=Debian Backports,a=${distro_codename}-backports,l=Debian Backports";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and ansible_distribution == 'Debian'

- name: Ensure Ubuntu updates repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"${distro_id}:${distro_codename}-updates";'
    line: '        "${distro_id}:${distro_codename}-updates";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and ansible_distribution == 'Ubuntu'

- name: Ensure Ubuntu backports repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"${distro_id}:${distro_codename}-backports";'
    line: '        "${distro_id}:${distro_codename}-backports";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and ansible_distribution == 'Ubuntu'

# Custom repos
- name: Ensure Netsplit repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"o=Netsplit,'
    line: '        "site=deb.netsplit.it";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and 'netsplit' in apt_auto_update_repos

- name: Ensure Grafana repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"site=apt.grafana.com";'
    line: '        "site=apt.grafana.com";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and 'grafana' in apt_auto_update_repos

- name: Ensure Postgres repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"o=apt.postgresql.org,a=\${distro_codename}-pgdg,n=\${distro_codename}-pgdg,l=PostgreSQL for Debian/Ubuntu repository,c=main";'
    line: '        "o=apt.postgresql.org,a=${distro_codename}-pgdg,n=${distro_codename}-pgdg,l=PostgreSQL for Debian/Ubuntu repository,c=main";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and 'postgres' in apt_auto_update_repos

- name: Ensure Docker repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"o=Docker,a=\${distro_codename},l=Docker CE,c=stable";'
    line: '        "o=Docker,a=${distro_codename},l=Docker CE,c=stable";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and 'docker' in apt_auto_update_repos

- name: Ensure GitLab runner repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"o=packages.gitlab.com/runner/gitlab-runner,a=\${distro_codename},n=\${distro_codename},l=gitlab-runner,c=main";'
    line: '        "o=packages.gitlab.com/runner/gitlab-runner,a=${distro_codename},n=${distro_codename},l=gitlab-runner,c=main";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and 'gitlab' in apt_auto_update_repos

- name: Ensure GitLab EE repo is included in unattended upgrades
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? *"o=packages.gitlab.com/gitlab/gitlab-ee,a=\${distro_codename},n=\${distro_codename},l=gitlab-ee,c=main";'
    line: '        "o=packages.gitlab.com/gitlab/gitlab-ee,a=${distro_codename},n=${distro_codename},l=gitlab-ee,c=main";'
    insertafter: '^Unattended-Upgrade::Origins-Pattern {'
    state: present
    create: true
  when: apt_auto_update and 'gitlab' in apt_auto_update_repos

# Configure unattended upgrades general settings
- name: Ensure unattended upgrades notification e-mail is set
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? ?Unattended-Upgrade::Mail "'
    line: 'Unattended-Upgrade::Mail "{{ apt_auto_update_email_rcpt }}";'
    state: present
    create: true
  when: apt_auto_update

- name: Ensure unattended upgrades notification e-mail condition is set
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? ?Unattended-Upgrade::MailReport "'
    line: 'Unattended-Upgrade::MailReport "{{ apt_auto_update_email_when }}";'
    state: present
    create: true
  when: apt_auto_update

- name: Ensure unattended upgrades logging to syslog is enabled
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? ?Unattended-Upgrade::SyslogEnable "'
    line: 'Unattended-Upgrade::SyslogEnable "true";'
    state: present
    create: true
  when: apt_auto_update

- name: Ensure unattended upgrades auto-reboot is disabled
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? ?Unattended-Upgrade::Automatic-Reboot "'
    line: 'Unattended-Upgrade::Automatic-Reboot "false";'
    state: present
    create: true
  when: apt_auto_update and apt_auto_update_reboot_at == "never"

- name: Ensure unattended upgrades auto-reboot is enabled
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? ?Unattended-Upgrade::Automatic-Reboot "'
    line: 'Unattended-Upgrade::Automatic-Reboot "true";'
    state: present
    create: true
  when: apt_auto_update and apt_auto_update_reboot_at != "never"

- name: Ensure unattended upgrades auto-reboot time is configured
  become: true
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^/?/? ?Unattended-Upgrade::Automatic-Reboot-Time "'
    line: 'Unattended-Upgrade::Automatic-Reboot-Time "{{ apt_auto_update_reboot_at }}";'
    state: present
    create: true
  when: apt_auto_update and apt_auto_update_reboot_at != "never"

# Configure needrestart
- name: Ensure needrestart is configured to restart daemons automatically
  become: true
  copy:
    content: "$nrconf{restart} = 'a';"
    dest: /etc/needrestart/conf.d/autorestart.conf
    mode: 0600
    owner: root
    group: root
  when: apt_auto_update and apt_auto_update_reboot_at != "never"

- name: Ensure needrestart is NOT configured to restart daemons automatically
  become: true
  file:
    path: /etc/needrestart/conf.d/autorestart.conf
    state: absent
  when: not apt_auto_update or apt_auto_update_reboot_at == "never"
