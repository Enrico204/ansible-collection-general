- module_defaults:
    apt:
      cache_valid_time: 86400
  block:
    - name: Ensure old docker-debian packages are not installed
      become: true
      apt:
        state: absent
        pkg:
          - docker.io
          - docker
          - docker-compose
          - docker-engine
          - containerd
          - runc

    # Repo for Docker and Podman/buildah/skopeo
    - name: Add repositories
      include_tasks: _apt-repo.yml
      loop:
        - name: docker
          key: https://download.docker.com/linux/debian/gpg
          repo_line: "https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        # - name: libcontainers
        #   key: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_{{ ansible_distribution_version }}/Release.key"
        #   repo_line: "http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_{{ ansible_distribution_version }}/ /"

    # Install everything
    - name: Install containers packages
      become: true
      apt:
        state: present
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - podman
          - buildah
          - skopeo
          - qemu-user-static

    - name: Configure user namespaces
      become: true
      ansible.posix.sysctl:
        name: kernel.unprivileged_userns_clone
        value: 1
        sysctl_set: true
        state: present
        reload: true
      when: 'not (ansible_virtualization_role == "guest" and ansible_virtualization_type == "lxc")'

    # Configure docker local proxy + local proxy CA
    - name: Creating docker dynamic config dir for systemd
      become: true
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: 0755
      when: docker_mirror_proxy is defined

    - name: Set HTTP proxy for docker images
      become: true
      copy:
        content: |
          [Service]
          Environment="HTTP_PROXY={{ docker_mirror_proxy }}/"
          Environment="HTTPS_PROXY={{ docker_mirror_proxy }}/"
          Environment="NO_PROXY={{ docker_mirror_noproxy | default('') }}"
        dest: /etc/systemd/system/docker.service.d/http-proxy.conf
        owner: root
        group: root
        mode: 0644
      when: docker_mirror_proxy is defined
      notify: "Restart docker"

    - name: Remove HTTP proxy for docker images if not specified
      become: true
      file:
        path: /etc/systemd/system/docker.service.d/http-proxy.conf
        state: absent
      when: docker_mirror_proxy is not defined
      notify: "Restart docker"

    - name: Set HTTP proxy for podman OCI images
      become: true
      copy:
        content: |
          [engine]
          env=["http_proxy={{ docker_mirror_proxy }}", "https_proxy={{ docker_mirror_proxy }}", "no_proxy={{ docker_mirror_noproxy | default('') }}"]
        dest: /etc/containers/containers.conf
        owner: root
        group: root
        mode: 0644
      when: docker_mirror_proxy is defined

    - name: Remove HTTP proxy for podman OCI images
      become: true
      file:
        path: /etc/containers/containers.conf
        state: absent
      when: docker_mirror_proxy is not defined

    # Add docker mirror proxy certificate
    - name: Add docker mirror CA certificate
      become: true
      copy:
        dest: /usr/local/share/ca-certificates/docker_registry_proxy.crt
        content: "{{ docker_mirror_cert }}"
        owner: root
        group: root
        mode: 0644
      when: docker_mirror_proxy is defined and docker_mirror_cert is defined
      notify: ["Refresh CA certificates local store", "Restart docker"]

    - name: Remove docker mirror CA certificate
      become: true
      file:
        path: /usr/local/share/ca-certificates/docker_registry_proxy.crt
        state: absent
      when: docker_mirror_proxy is not defined or docker_mirror_cert is not defined
      notify: ["Refresh CA certificates local store", "Restart docker"]

    # Add a task for cleaning docker images each night
    - name: "Add docker image cleaner task"
      become: true
      cron:
        name: "clean docker"
        minute: "0"
        hour: "4"
        weekday: "0"
        job: "docker system prune -f"
        user: root
      when: docker_autoclean

    - name: Setup sub-gids for podman
      become: true
      ansible.builtin.lineinfile:
        path: /etc/subgid
        create: true
        line: "gitlab-runner:200000:65536"
        mode: 0644
        owner: root
        group: root
        state: present

    - name: Setup sub-uids for podman
      become: true
      ansible.builtin.lineinfile:
        path: /etc/subuid
        create: true
        line: "gitlab-runner:200000:65536"
        mode: 0644
        owner: root
        group: root
        state: present

    # Modify docker config
    - name: Check if config file exists
      become: true
      stat:
        path: /etc/docker/daemon.json
      register: stat_docker_cfg

    - name: Load current docker configuration
      become: true
      slurp:
        src: /etc/docker/daemon.json
      register: loaded_docker_cfg
      changed_when: false
      when: stat_docker_cfg.stat.exists

    - name: Parse current configuration
      set_fact:
        loaded_docker_cfg: "{{ loaded_docker_cfg.content | b64decode | from_json | default({}) }}"
      when: stat_docker_cfg.stat.exists

    - name: Start from empty configuration
      become: true
      set_fact:
        loaded_docker_cfg: {}
      when: not stat_docker_cfg.stat.exists

    - name: Set logging
      set_fact:
        loaded_docker_cfg: "{{ loaded_docker_cfg | combine({ 'log-driver': 'local', 'log-opts': {'max-size': '500m'} }) }}"
      when: not docker_manual_log_config

    - name: Write new docker configuration for logging
      become: true
      copy:
        content: "{{ loaded_docker_cfg | to_nice_json }}"
        dest: /etc/docker/daemon.json
      when: not docker_manual_log_config
      notify: "Restart docker"

    - name: Enable live-restore
      set_fact:
        loaded_docker_cfg: "{{ loaded_docker_cfg | combine({ 'live-restore': true }) }}"
      when: docker_live_restore_enabled

    - name: Disable live-restore
      set_fact:
        loaded_docker_cfg: "{{ loaded_docker_cfg | combine({ 'live-restore': false }) }}"
      when: not docker_live_restore_enabled

    - name: Write new docker configuration for live-restore
      become: true
      copy:
        content: "{{ loaded_docker_cfg | to_nice_json }}"
        dest: /etc/docker/daemon.json
      notify: "Reload docker"

# Configure Podman to use ZFS
    - name: Check if podman storage config exists
      stat:
        path: /etc/containers/storage.conf
      register: podman_storage_cfg

    - name: Configure ZFS driver for Podman
      become: true
      lineinfile:
        path: /etc/containers/storage.conf
        regexp: '^driver ='
        line: 'driver = "zfs"'
        insertafter: '^\[storage\]'
        state: present
      when: '"ZFS" in ansible_cmdline["root"] and podman_storage_cfg.stat.exists'
