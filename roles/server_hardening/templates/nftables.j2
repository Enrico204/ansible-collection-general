#!/usr/sbin/nft -f

flush ruleset

table inet fw {

{# Create blacklist sets #}
{% for list in fw_blacklists %}
        set {{ list }} {
            type ipv4_addr; flags interval;
        }
{% endfor %}

{# Create whitelist sets #}
{% for list in fw_whitelists %}
        set {{ list }} {
            type ipv4_addr; flags interval;
        }
{% endfor %}

{# Create chain for dropping blacklisted IPs #}
{% if (fw_blacklists | length) > 0 %}
        chain blacklists {
{% for list in fw_blacklists %}
            ip saddr @{{ list }} counter drop
{% endfor %}
        }
{% endif %}

{# Create chain for accepting whitelisted IPs #}
{% if (fw_whitelist_services | length) > 0 %}
        chain accept_restricted {
{% for list in fw_whitelists %}
            ip saddr @{{ list }} counter accept
{% endfor %}
        }
{% endif %}

        chain ingress {
            type filter hook input priority 1; policy drop;
            {# Always allow loopback traffic -#}
            iif "lo" accept

            {# Connection tracking: allow established traffic without further analysis, drop packets in a INVALID state -#}
            ct state established,related accept
            ct state invalid counter drop

            {# Block remote packets claiming to be from a loopback address -#}
            iif != lo ip  saddr 127.0.0.0/8 counter drop comment "Block martian packets"
            iif != lo ip6 saddr ::1/128     counter drop comment "Block martian packets"

            {# Chain for preventing ping flooding - up to 6 pings per second from a single 
            source, again with log limiting. Also prevents us from ICMP REPLY flooding 
            some victim when replying to ICMP ECHO from a spoofed source #}
            {# Permit IMCP echo requests (ping) and use ICMPFLOOD chain for preventing ping flooding #}
            {# TODO #}

            {# Permit useful IMCP packet types for IPv4
            Note: RFC 792 states that all hosts MUST respond to ICMP ECHO requests.
            Blocking these can make diagnosing of even simple faults much more tricky.
            Real security lies in locking down and hardening all services, not by hiding -#}
            icmp type { echo-request } counter accept

            {# Permit needed ICMP packet types for IPv6 per RFC 4890 -#}
            {# TODO -#}
            icmpv6 type { echo-request, nd-neighbor-solicit, mld-listener-query, nd-router-solicit } accept

            {# SSH from safe management addresses before everything else, to avoid firewall lockouts -#}
            {% for addr in fw_safe_mgmt4 -%}
            ip saddr {{ addr }} tcp dport { 22, {{ fw_ssh_port }} } accept comment "SSH safe management"
            {% endfor %}

            {% if fw_blacklists -%}
            iifname "{{ fw_wan }}" jump blacklists comment "Drop blacklisted IPs"
            {% endif %}

            {# Public services -#}
            {% for svc in fw_public_services -%}
            {{ svc.proto }} dport {{ svc.port }} accept comment "{{ svc.name | default("") }}"
            {% endfor %}

            {# "Protected" services - accessible only behind whitelist -#}
            {% for svc in fw_whitelist_services -%}
            {{ svc.proto }} dport {{ svc.port }} jump accept_restricted comment "{{ svc.name | default("") }}"
            {% endfor %}

            {# Other rules -#}
{% for svc in fw_rules %}
{% if (svc.action | default('')) == 'accept-if-whitelisted' %}
    {%- set action = 'jump accept_restricted' %}
{% elif (svc.action | default('')) == 'reject' %}
    {%- set action = 'counter reject' %}
{% elif (svc.action | default('')) == 'drop' %}
    {%- set action = 'counter drop' %}
{% else %}
    {%- set action = 'accept' %}
{% endif %}

            {% if 'in_interface' in svc %}iifname "{{ svc.in_interface }}" {% endif -%}
            {{ svc.proto }} dport {{ svc.port }} {{ action }} comment "{{ svc.name | default("") }}"
{% endfor %}

            {# Custom nft rules -#}
            {{ fw_nft_input | default("") }}

            {# Drop all packets that are going to broadcast, multicast or anycast address -#}
            meta pkttype { broadcast, multicast } drop comment "Drop broadcast/multicast/anycast"
            ip daddr 224.0.0.0/4                  drop comment "Drop multicast"

            {# Do not log garbage broadcast packets -#}
            {# TODO: in theory these packets will be blocked by rules above -#}
            udp dport { 135, 137, 138, 139, 445 } drop comment "Drop SMB"
            udp sport 137                         drop comment "Drop SMB"
            tcp dport { 135, 137, 138, 139, 445 } drop comment "Drop SMB"
            udp dport 1900                        drop comment "Drop UPnP"
        }
}

table ip fw {
        chain postfwdrouting {
                type nat hook postrouting priority 100; policy accept;
{{ fw_nft_snat | default("") }}
        }
}
