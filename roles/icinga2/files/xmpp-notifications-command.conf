object NotificationCommand "xmpp-notifications-command" {
  import "plugin-notification-command"
    
  command = {{
    var xmpp_jid = macro("$xmpp_notifications_jid$")

    if (xmpp_jid == null) {
      log(LogDebug, "xmpp-notifications","chat_id not set, aborting...")
      return
    }

    log(LogDebug, "xmpp-notifications", "Sending notification...reading user configuration")
    var xmpp_user = macro("$xmpp_notifications_user$")
    var xmpp_password = macro("$xmpp_notifications_password$")
    var xmpp_server = macro("$xmpp_notifications_server$")
    var xmpp_tls = macro("$xmpp_notifications_tls$")
    var xmpp_tls_insecure = macro("$xmpp_notifications_tls_insecure$")
    var xmpp_emoji = macro("$xmpp_notifications_emoji$")

    log(LogDebug, "xmpp-notifications", "Sending notification...reading notification data")
    var icinga2_base_url = macro("$xmpp_notifications_icinga2_base_url$")
    var notification_type = macro("$notification.type$")
    var notification_author = macro("$notification.author$")
    var notification_comment = macro("$notification.comment$")
    var icinga_long_date_time = macro("$icinga.long_date_time$")
    var service_name = macro("$service.name$")
    var service_display_name = macro("$service.display_name$")
    var service_state = macro("$service.state$")
    var service_duration_sec = macro("$service.duration_sec$")
    var service_check_attempt = macro("$service.check_attempt$")
    var service_last_state = macro("$service.last_state$")
    var service_output = macro("$service.output$")
    var host_name = macro("$host.name$")
    var host_display_name = macro("$host.display_name$")
    var host_state = macro("$host.state$")
    var host_duration_sec = macro("$host.duration_sec$")
    var host_check_attempt = macro("$host.check_attempt$")
    var host_last_state = macro("$host.last_state$")
    var host_output = macro("$host.output$")

    log(LogDebug, "xmpp-notifications", "Sending notification...")
    var line = "\\n"
    var notification_type_custom_text = ""
    if (notification_type == "CUSTOM" || notification_type == "ACKNOWLEDGEMENT") {
      notification_type_custom_text = "*Comment:* " + notification_comment + " *by* " + notification_author + line
    }

    function ReadableDuration(seconds){
      if(seconds <= 60) {
        return Math.round(seconds) + " seconds"
      } else if(seconds <= 3600) {
        return Math.round(seconds / 60) + " minutes"
      } else if(seconds <= 86400) {
        return Math.round(seconds / 3600) + " hours"
      } else {
        return Math.round(seconds / 86400) + " days"
      }
    }

    log(LogDebug, "xmpp-notifications", "Sending notification...generating notification text")
    var plugin_output = host_output
    var text = "error crafting payload"
    var state_duration = ""
    var service_details = ""

    if (service_name != null) {
      # Notification is for a service
	    var emoji = xmpp_emoji.get(service_state)
      var plugin_output = service_output
      var state_text = "Transitioned from " + service_last_state + " to " + service_state
      var summary = "*" + notification_type + ": " + service_name + " is " + service_state + " on " + host_name + "*"
      if(service_last_state == service_state) {
        state_text = "Is still in " + service_state
        var service_duration_readable = ReadableDuration(service_duration_sec)
        var state_duration = "*Duration:* " + service_duration_readable + line
      }
      service_details = "*Service:* " + service_display_name + line
    } else {
      # Notification is for a host
	    var emoji = xmpp_emoji.get(service_state)
      var state_text = "Transitioned from " + host_last_state + " to " + host_state
      var summary = notification_type + ": " + host_name + " is " + host_state
      var host_duration_readable = ReadableDuration(host_duration_sec)
      if(host_last_state == host_state) {
        state_text = "Is still " + host_state
        var state_duration = "*Duration:* " + host_duration_readable + line
      }
    }
    plugin_output_escaped = plugin_output.replace("\"", "\\\"")
    text = emoji + summary + line + "*Host:* " + host_display_name + line + service_details + "*State:* " + state_text + line + state_duration + notification_type_custom_text + "*Plugin Output:* \\n" + "```" + plugin_output_escaped + "```"
    log(LogDebug, "xmpp-notifications", "Sending notification...generated notification text successfully: " + text)

    log(LogDebug, "xmpp-notifications", "Generating notification command")
    var payload_argument = escape_shell_arg(text)

    var tlscmds = ""
    if (xmpp_tls != null) {
      tlscmds = "--tls"
      if (xmpp_tls_insecure != null) {
        tlscmds = "--tls -n"
      }
    }

    var cmd = [
      "echo",
      payload_argument,
      "|",
      "sendxmpp",
      "-u", xmpp_user,
      "-p", xmpp_password,
      "-j", xmpp_server,
      tlscmds,
      xmpp_jid
    ]
    var notification_command = cmd.join(" ")
    log(LogDebug, "xmpp-notifications", "Generated notification command successfully: " + notification_command)

    return notification_command
  }}
}
