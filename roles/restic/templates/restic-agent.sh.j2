#!/usr/bin/env bash
set -euo pipefail

export PATH="$PATH:/usr/bin/:/usr/local/bin/"

export RESTIC_REPOSITORY='{{ restic_agent_repository }}'
{% if restic_agent_password != "" %}
export RESTIC_PASSWORD='{{ restic_agent_password }}'
{% endif %}
IONICE=""
{% if (restic_agent_cgroups2_devices | default([])) | length > 0 %}
CGROUP2_BASE="$(mount | grep cgroup2 | cut -d ' ' -f 3)"
CGROUP2_PATH="$CGROUP2_BASE/restic-agent"
{% endif %}

{# In scheduled tasks, add a random delay #}
if [ "${1:-}" == "-cron" ]; then
{% if restic_agent_delayed_start_max > 0 %}
	sleep $(($RANDOM % {{ restic_agent_delayed_start_max }}))
{% endif %}

    {# Redirect stdout and stderr to syslog #}
    {#exec 3>&1 4>&2
    #exec 1> >(logger -t restic-agent -p local0.info) 2> >(logger -t restic-agent -p local0.err) #}

fi

## Cleanup script
function __script_cleanup() {
	local exitcode=$1
	local bashcmd=$3
	local lineno=$2
	# Disable the error trap handler to prevent potential recursion
	trap - ERR
	trap - EXIT
	# Disable errors
	set +Eeuo pipefail

	# Here you can handle the cleanup
	pkill -9 restic
{% if (restic_agent_cgroups2_devices | default([])) | length > 0 %}
	{# Switch current process to root cgroup #}
	echo $$ > "$CGROUP2_BASE/cgroup.procs"
	if [ -d "$CGROUP2_PATH" ]; then
		rmdir "$CGROUP2_PATH"
	fi
{% endif %}

	# Exit with failure status
	exit $exitcode
}

# ERR is the trap for errors, EXIT is the trap for clean exits
trap '__script_cleanup $? $LINENO "$BASH_COMMAND"' EXIT ERR

## Pre-backup script

{{ restic_agent_pre | default('') }}

## END pre-backup script

{% if (restic_agent_cgroups2_devices | default([])) | length > 0 %}
# Limit I/O with cgroups2
{# Create cgroup #}
if [ -d "$CGROUP2_PATH" ]; then
	rmdir "$CGROUP2_PATH"
fi
mkdir "$CGROUP2_PATH"

{# Enable I/O controller on root cgroup #}
echo "+io" > "$CGROUP2_BASE/cgroup.subtree_control"

{# Limit to MB/s and IOPS #}
{% for device in restic_agent_cgroups2_devices %}
DEV_ADDR="$(cat /proc/partitions | grep -E ' {{ device.name }}$' | tr -s ' ' | cut -f 2,3 -d ' ' | tr ' ' ':')"
echo "$DEV_ADDR rbps={{ device.bps | default(10485760) }} wbps={{ device.bps | default(10485760) }} riops={{ device.iops | default(2000) }} wiops={{ device.iops | default(2000) }}" > "$CGROUP2_PATH/io.max"
{% endfor %}

{# Switch current process to cgroup #}
echo $$ > "$CGROUP2_PATH/cgroup.procs"

{% else %}
# Limit I/O with ionice
IONICE="ionice -c 3"
if ! command -v ionice &> /dev/null
then
	IONICE=""
fi
{% endif %}

{# Tidy cache #}
restic cache --cleanup

nice -n 19 $IONICE restic backup \
	--one-file-system \
	--exclude-caches \
	--exclude-if-present '.nobackup' \
{% for excl in restic_agent_iexclude %}
	--iexclude '{{ excl }}' \
{% endfor %}
{% for excl in restic_agent_iexclude_basic %}
	--iexclude '{{ excl }}' \
{% endfor %}
	{{ restic_agent_custom_opts }} \
	{% for path in restic_agent_backup_paths %} {{ path }} {% endfor %}

## Post-backup script

{{ restic_agent_post | default('') }}

## END post-backup script

{% if restic_cleanup %}
{# Mark old backups for GC #}
restic forget \
    --host="$(hostname)" \
	--keep-daily    7   \
	--keep-weekly   4   \
	--keep-monthly  6   \
	--keep-tag MANUAL   \
	--group-by host
{% endif %}
